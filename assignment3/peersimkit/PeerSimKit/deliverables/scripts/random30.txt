# This script builds a randomly connected graph and prints in-degree 
# distribution, path length and clustering coefficient information.
# Basically it produces the data used as baseline.

SIZE 10000

CYCLE 1000
CYCLES 300

MINDELAY 10
MAXDELAY 60
random.seed 1234567890
network.size SIZE
simulation.endtime CYCLE*CYCLES
simulation.logtime CYCLE


protocol.tr UniformRandomTransport
{
	mindelay (CYCLE*MINDELAY)/100
    maxdelay (CYCLE*MAXDELAY)/100

}

protocol.gossip example.gossip.BasicShuffle
{
	# the cache size should be set to 30 and to 50.
	cacheSize 30
	shuffleLength 8

	step CYCLE
	transport tr
	period CYCLE
}

init.wire WireKOut
{
	protocol gossip
	k 50
}

control.degree example.reports.InDegreeObserver
{
	protocol gossip
	step CYCLE
	starttime (CYCLE*(CYCLES-1))
    endtime (CYCLE*CYCLES)
}

control.graphPL GraphStats
{
	protocol gossip
	step CYCLE
	undir true
	nl 10
	nc 1000
}